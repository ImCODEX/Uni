     1                                  ;d-(7-a*b+c)/a-6+x/2; a,c-byte; b-word; d-doubleword; x-qword
     2                                  ; a = 3 c = 1 b = 5 d = 10 x = 80;
     3                                  ; 10 - (7-3*5+1)/3 -6 + 40 = 10 + 2 -6 + 40 = 46 
     4                                  ;  
     5                                  
     6                                  ; REZOLVARE PENTRU INTERPRETAREA CU SEMN
     7                                  
     8                                  
     9                                  bits 32 ; assembling for the 32 bits architecture
    10                                  
    11                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    12                                  global start        
    13                                  
    14                                  ; declare external functions needed by our program
    15                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    16                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    17                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data
    21 00000000 03                          a db 3
    22 00000001 01                          c db 1
    23 00000002 0500                        b dw 5
    24 00000004 0A000000                    d dd 10
    25 00000008 5000000000000000            x dq 80
    26 00000010 2800                        q dw 40
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 A0[00000000]                    mov al, [a]; AL = a
    32 00000005 6698                            cbw ; am convertit [a] din byte in word 
    33 00000007 66F725[02000000]                mul WORD [b]; DX:AX = AL * [b] = a * b
    34 0000000E 6652                            push dx;
    35 00000010 6650                            push ax; am pus a*b pe stiva
    36 00000012 BB07000000                      mov ebx, 7; 
    37 00000017 58                              pop eax; EAX = a*b
    38 00000018 29C3                            sub ebx,eax; EBX = 7-a*b
    39 0000001A A0[01000000]                    mov al, [c]; AL = c
    40 0000001F 6698                            cbw; am convertit [c] din byte in word 
    41 00000021 98                              cwde; am convertit [c] din word in double word EAX = [c]
    42 00000022 01D8                            add eax, ebx; EAX = (7-a*b) + c 
    43 00000024 50                              push eax; 
    44 00000025 665A                            pop dx;
    45 00000027 665A                            pop dx; am pus in DX:AX = (7-a*b) + c 
    46 00000029 6689C3                          mov bx,ax; salvez pe ax in bx
    47 0000002C A0[00000000]                    mov al, [a]; AL = a
    48 00000031 6698                            cbw ; am convertit [a] din byte in word 
    49 00000033 6689C1                          mov cx, ax; salvez pe ax in cx pentru ca idiv cauta valoarea unu dw in dx:ax
    50 00000036 6689D8                          mov ax, bx; -||-
    51 00000039 66F7F9                          idiv cx; AX = [7-a*b + c]/a; in DX restul
    52 0000003C 98                              cwde; am convertit EAX = [7-a*b + c]/a 
    53 0000003D 8B15[04000000]                  mov edx, dword[d]; EDX = [d]
    54 00000043 29C2                            sub edx, eax; EDX = d-(7-a*b+c)/a
    55 00000045 B806000000                      mov eax, 6; am facut 6 double word
    56 0000004A 29C2                            sub edx, eax; EDX = d-(7-a*b+c)/a - 6
    57 0000004C 89D1                            mov ecx, edx; ECX = d-(7-a*b+c)/a - 6
    58                                          
    59 0000004E A1[08000000]                    mov eax, dword[x]; 
    60 00000053 8B15[0C000000]                  mov edx, dword[x+4]; EDX:EAX = [x]
    61 00000059 BB02000000                      mov ebx, 2; EBX = 2
    62 0000005E F7FB                            idiv ebx; EAX = EDX:EBX / 2 = x / 2
    63 00000060 01C8                            add eax, ecx; EAX = rezultatul final
    64                                          
    65                                          
    66                                          
    67 00000062 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000064 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
